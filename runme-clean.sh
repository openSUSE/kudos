#!/bin/bash
# Copyright ¬© 2025‚Äìpresent Lubos Kocman and openSUSE contributors
# SPDX-License-Identifier: Apache-2.0

set -e
trap 'echo "üßπ Shutting down..."; kill 0 2>/dev/null || true' EXIT

echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
echo " üíö openSUSE Kudos ‚Äî Full Clean Run"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# --- Ensure dependencies are installed ---
if [ ! -d node_modules ]; then
  echo "üì¶ node_modules not found ‚Äî installing dependencies..."
  npm install
else
  echo "‚úÖ node_modules present, skipping npm install."
fi

# --- Always use dot_env.dev for local runs ---
if [ ! -f .env ]; then
  if [ -f dot_env.dev ]; then
    cp dot_env.dev .env
    echo "üìÑ Copied dot_env.dev ‚Üí .env"
  else
    echo "‚ùå Missing dot_env.dev! Please add it before running."
    exit 1
  fi
else
  echo "‚úÖ Existing .env preserved."  
fi

# Frontend requires .env in the dir too
if [ ! -f frontend/.env ]; then
	ln -sf ../.env frontend/.env
fi
# --- Sanity check for duplicate databases ---
echo "üîç Checking for duplicate Prisma databases..."
FOUND_DUPES=$(find backend/prisma -type f -name "dev.db" | grep -v "^backend/prisma/dev.db" || true)
if [ -n "$FOUND_DUPES" ]; then
  echo "‚ö†Ô∏è Found stray Prisma DB files:"
  echo "$FOUND_DUPES"
  echo "üß® Removing duplicates to prevent confusion..."
  echo "$FOUND_DUPES" | xargs -r rm -f
else
  echo "‚úÖ No duplicate dev.db files found."
fi

# --- Reset + rebuild database ---
echo "üí• Resetting Prisma DB..."
rm -f backend/prisma/dev.db

echo "üßπ Cleaning old session files..."
rm -f backend/prisma/sessions.sqlite

if ! npx prisma -v >/dev/null 2>&1; then
  echo "‚ùå Prisma CLI not found ‚Äî installing..."
  npm install prisma --save-dev
fi

echo "üîÑ Syncing badge submodule with latest changes..."
pushd frontend/public/badges > /dev/null
git pull origin main
popd > /dev/null

echo "üîß Creating database schema from backend/prisma/schema.prisma..."
npx prisma db push --force-reset --schema=backend/prisma/schema.prisma

# --- Seed database ---
echo "üå± Seeding database..."
node backend/prisma/seed.js || { echo "‚ùå Seeding failed."; exit 1; }

# --- Verify DB presence ---
DB_PATH="backend/prisma/dev.db"
if [ -f "$DB_PATH" ]; then
  echo "‚úÖ Database file ready: $DB_PATH"
else
  echo "‚ùå Database file missing ‚Äî creating an empty one."
  mkdir -p "$(dirname "$DB_PATH")"
  sqlite3 "$DB_PATH" "VACUUM;"
fi

# --- Launch Prisma Studio in background ---
echo "üß≠ Starting Prisma Studio in background..."
BROWSER=none npx prisma studio --schema=backend/prisma/schema.prisma >/dev/null 2>&1 &
STUDIO_PID=$!
echo "üß© Prisma Studio running (PID: $STUDIO_PID) ‚Üí http://localhost:5555"

CERT_DIR="./certs"
CERT_KEY="${CERT_DIR}/localhost-key.pem"
CERT_CRT="${CERT_DIR}/localhost.pem"

mkdir -p "$CERT_DIR"

if [ ! -f "$CERT_KEY" ] || [ ! -f "$CERT_CRT" ]; then
  echo "üîê Generating local HTTPS certificates with mkcert..."
  if ! command -v mkcert >/dev/null 2>&1; then
    echo "‚ùå mkcert not found! zypper in mkcert"
    exit 1
  fi
  mkcert -install
  mkcert -key-file "$CERT_KEY" -cert-file "$CERT_CRT" localhost
else
  echo "‚úÖ Existing HTTPS certificates found in $CERT_DIR"
fi

# --- Launch app ---
echo "üöÄ Launching app (backend + frontend with logging enabled)"

# Force development mode and Prisma debug logging
export NODE_ENV=development
#export DEBUG=express:*,prisma:*,app:*
export DEBUG=express:*,app:*

# Use Prisma query logging too
export PRISMA_CLIENT_LOG_LEVEL=debug

#npm run dev
npx concurrently \
  "npm run backend:dev" \
  "npm run frontend"
