<hr class="divider">

<section class="scoreboard flip">
  <h2>üèÜ Top Contributors of the month</h2>
  <table class="scoreboard-table retro">
    <thead>
      <tr>
        <th>#</th>
        <th>Player</th>
        <th>Achievements</th>
        <th>Given</th>
        <th>Received</th>
      </tr>
    </thead>
    <tbody>
      <% leaderboard.forEach((u, i) => { %>
        <tr>
          <td><%= i + 1 %></td>
          <td>
            <a href="/user/<%= u.username %>">
              <% if (u.avatarUrl) { %>
                <img src="<%= u.avatarUrl %>" alt="<%= u.username %>" class="avatar-small"/>
              <% } %>
              <%= u.username %>
            </a>
          </td>
          <td><%= u.achievementsCount %></td>
          <td><%= u.kudosGiven %></td>
          <td><%= u.kudosReceived %></td>
        </tr>
      <% }) %>
    </tbody>
  </table>

  <p style="text-align:center;margin-top:10px;">
    <a href="/scoreboard" class="btn">View Full Scoreboard ‚Üí</a>
  </p>
</section>

<hr class="divider">

<section class="recent-kudos chat-feed flip">
  <h2>üí¨ Recent Kudos</h2>
  <div id="recent-feed" class="chat-window"></div>
</section>


<hr class="divider">

<section class="achievements-overview flip">
  <h2>üé® Achievements</h2>
  <p class="subtitle">Collect these badges by giving and receiving kudos!</p>
  <div class="achievement-grid small">
    <% achievements.forEach(a => { %>
      <div class="achievement-card <%= a.unlocked ? '' : 'locked' %>">
        <img src="<%= a.picture %>" alt="<%= a.title %>" class="achievement-icon">
        <div class="achievement-info">
          <h3><%= a.title %></h3>
          <p><%= a.description %></p>
        </div>
      </div>
    <% }) %>
  </div>
  <p style="text-align:center;margin-top:10px;">
    <a href="/achievements" class="btn">View All Achievements ‚Üí</a>
  </p>
</section>

<script>
async function loadKudosTicker() {
  const res = await fetch("/api/recognitions/recent");
  const items = (res.ok ? await res.json() : []).filter(i => i?.message);
  if (!items.length) return;

  const container = document.getElementById("recent-feed");
  const visibleCount = 8;         // show 8 lines
  const fadeDelay = 200;          // ms between lines
  const holdTime = 5000;          // wait before refreshing whole batch

  async function displayBatch(startIndex = 0) {
    container.innerHTML = ""; // clear all at once

    for (let i = 0; i < visibleCount; i++) {
      const item = items[(startIndex + i) % items.length];
      const line = document.createElement("div");
      line.className = "kudo-line";
      const from = item.fromUser?.username || "Someone";
      const to = item.recipients.map(r => r.user.username).join(", ");
      const msg = item.message || "";
      const icon = item.category?.icon || "/icons/kudo-default.png";
      const slug = item.slug;

      line.innerHTML = `
        <img src="${icon}" class="icon" alt="">
        <span><b>${from}</b> ‚Üí <b>${to}</b>: ${msg}</span>
      `;
      line.onclick = () => (window.location = "/recognition/" + slug);

      container.appendChild(line);

      // Staggered fade-in effect
      setTimeout(() => line.classList.add("visible"), i * fadeDelay);
    }

    // Wait for all to appear + hold time
    await new Promise(r => setTimeout(r, visibleCount * fadeDelay + holdTime));
    const nextIndex = (startIndex + visibleCount) % items.length;
    displayBatch(nextIndex); // cycle next batch
  }

  displayBatch();
}

loadKudosTicker();
</script>
